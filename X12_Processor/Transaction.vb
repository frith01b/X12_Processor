Option Strict On
Option Explicit On

Imports System.Xml
Imports System.Data
Imports System.IO
Imports System.Xml.Serialization

' @TODO  Sub-field processing
' @TODO  Load_Field_Config() (XML)

Interface Translate
    Sub Import(Seg As ParseSegment, SourceRecNum As Long)
    Function GetData() As Segment
    ' Filter removes extraneous notes/data
    Function Filter() As String()
    'Remap adjusts incoming data to correct item #'s, code values , etc
    Sub ReMap()
    Function Output_X12() As String
    Function Validate() As Boolean


    Property Fields As Dictionary(Of String, String)

End Interface


<Serializable()>
Public Class Segment
    Implements Translate

    Shared RecordName As String
    Shared RecordLength As Integer
    Shared FieldDefs As List(Of FieldDef)
    Shared FieldCount As Integer

    Private _Fields As Dictionary(Of String, String)




    Public Sub New()

        If FieldCount = 0 Then
            ' @TODO  need reference to other versions
            'Field names are sorted , and import/output is generated by alpha order of fields) 
            LoadFieldDef(ConfigInfo.SegmentDefDir & "\" & RecordName & ".def")
        End If


    End Sub
    Public Property Fields As Dictionary(Of String, String) Implements Translate.Fields
        Get
            Return _Fields
        End Get
        Set(value As Dictionary(Of String, String))
            _Fields = _Fields.Union(value).ToDictionary(Function(d) d.Key, Function(d) d.Value)
        End Set

    End Property
    Public Sub Remove_Field_Key(Value As String)
        _Fields.Remove(Value)
    End Sub
    Public Sub Set_Field_Key(NewKey As String, NewValue As String)
        _Fields(NewKey) = NewValue
    End Sub
    Public Function Get_Field_Key(NewKey As String) As String
        Return _Fields(NewKey)
    End Function

    Sub AddFieldDef(NewField As FieldDef)
        If NewField.FName.Length > 0 Then
            FieldCount = FieldCount + 1
            FieldDefs.Add(NewField)
        Else
            Interchange.AddError("ERR002:Unable to create Field ", Interchange.Error_Type_List.StdError)

        End If
    End Sub
    Sub RemoveFieldDef(FieldName As String)
        FieldDefs.RemoveAll(Function(field) field.FName = FieldName)
    End Sub


    Public Sub Import(Seg As ParseSegment, SourceRecNum As Long) Implements Translate.Import
        Interchange.RecordCount = Interchange.RecordCount + 1
        Try
            ' use incoming field count instead of default map
            'because not all fields always populated
            For x = 0 To Seg.Elements.Count - 1
                Set_Field_Key(FieldDefs(x).FName, Seg.Elements(x).Trim)
            Next
        Catch ex As Exception
            Interchange.AddError("ERR001:Unable to parse " & RecordName & " segment at Source File Rec#" & SourceRecNum, Interchange.Error_Type_List.StdError)
        End Try


    End Sub

    Public Function GetData() As Segment Implements Translate.GetData
        Return Me
    End Function

    Public Function Output_X12() As String Implements Translate.Output_X12
        Dim RESULT As String = ""
        Dim FieldList As List(Of String)
        Dim x As Integer

        RESULT = String.Join("", Enumerable.Repeat(" ", RecordLength))

        FieldList = _Fields.Keys.ToList()
        FieldList.Sort()



        For x = 0 To FieldList.Count - 1
            'need to substring & PAD & Strip quotes

            Select Case FieldDefs(x).Alignment
                Case "LPAD"
                    ' should be getfield that calls these as subs
                    RESULT = RESULT & Get_Field_LPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding)
                Case "RPAD"
                    RESULT = RESULT & Get_Field_RPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding)
                Case "ZPAD"
                    RESULT = RESULT & Get_Field_ZPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding)
                Case "RAW"
                    RESULT = RESULT & _Fields(FieldList(x))
            End Select

            If x = FieldList.Count - 1 Then
                'If PartnerInfo.X12_Always_Delimiter = True Or Mid(PartnerInfo.M2K_PARTNER_ID, 1, 5) = "PRIDE" Or Mid(PartnerInfo.M2K_PARTNER_ID, 1, 5) = "CLARK" Then
                '    RESULT = RESULT & X12SegDelimiter
                'end if
            Else
                RESULT = RESULT & Interchange.SegmentDelimiter
            End If

        Next

        Return RESULT
    End Function

    Public Function Filter() As String() Implements Translate.Filter
        Throw New NotImplementedException()
    End Function

    Public Sub ReMap() Implements Translate.ReMap
        Throw New NotImplementedException()
    End Sub

    ' fixed length field output
    Function Get_Field_RPAD(outField As String, myLen As Integer, myPad As String) As String

        ' ensure data does not contain field/element delimiter
        outField = outField.Replace(Interchange.ElementDelimiter, Interchange.ElementDelimiter_Replace_Char)
        ' add padding character to end, limit max size to myLen
        outField &= String.Join("", Enumerable.Repeat(myPad, myLen))
        outField = outField.Substring(1, myLen) + Interchange.ElementDelimiter
        Return outField
    End Function
    Function Get_Field_LPAD(ByRef outField As String, myLen As Integer, myPad As String) As String
        ' add padding character to beginning, limit max size to myLen
        outField = outField.Replace(Interchange.ElementDelimiter, Interchange.ElementDelimiter_Replace_Char)
        outField = String.Join("", Enumerable.Repeat(myPad, myLen)) & outField
        outField = Right(outField, myLen) & Interchange.ElementDelimiter
        Return (outField)

    End Function
    Function Get_Field_ZPAD(ByRef outField As String, myLen As Integer, myPad As String) As String
        ' add zero padding character to beginning, limit max size to myLen
        outField = outField.Replace(Interchange.ElementDelimiter, Interchange.ElementDelimiter_Replace_Char)
        outField = String.Join("", Enumerable.Repeat("0", myLen)) & outField
        outField = Right(outField, myLen) & Interchange.ElementDelimiter
        Return (outField)

    End Function

    Function Right(myStr As String, size As Integer) As String
        Dim result As String = ""

        If size >= myStr.Length Then
            myStr.Substring(myStr.Length - size, size)
        Else
            result = myStr
        End If
        Return result

    End Function

    Function Gen_FixedLength_Record(ByRef MyTrans As Segment) As String
        Dim FieldList As List(Of String)
        Dim x As Integer
        Dim Result As String

        Result = String.Join("", Enumerable.Repeat(" ", RecordLength))

        FieldList = _Fields.Keys.ToList()
        FieldList.Sort()



        For x = 0 To FieldList.Count - 1
            'need to substring & PAD & Strip quotes
            If FieldDefs(x).FLength > 1 Then

                Select Case FieldDefs(x).Alignment
                    Case "LPAD"

                        Result = Result.Substring(1, FieldDefs(x).StartPosition - 1) & Get_Field_LPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding) & Result.Substring(FieldDefs(x).StartPosition + FieldDefs(x).FLength + 1)
                    Case "RPAD"
                        Result = Result.Substring(1, FieldDefs(x).StartPosition - 1) & Get_Field_RPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding) & Result.Substring(FieldDefs(x).StartPosition + FieldDefs(x).FLength + 1)
                    Case "ZPAD"
                        Result = Result.Substring(1, FieldDefs(x).StartPosition - 1) & Get_Field_ZPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding) & Result.Substring(FieldDefs(x).StartPosition + FieldDefs(x).FLength + 1)
                End Select
            Else
                Select Case FieldDefs(x).Alignment
                    Case "LPAD"

                        Result = Get_Field_LPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding) & Result.Substring(FieldDefs(x).StartPosition + FieldDefs(x).FLength + 1)
                    Case "RPAD"
                        Result = Get_Field_RPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding) & Result.Substring(FieldDefs(x).StartPosition + FieldDefs(x).FLength + 1)
                    Case "ZPAD"
                        Result = Get_Field_ZPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding) & Result.Substring(FieldDefs(x).StartPosition + FieldDefs(x).FLength + 1)
                End Select
            End If
        Next

        Return Result
    End Function
    Function Gen_X12_Record(InRec As Segment) As String
        Dim FieldCount As Integer
        Dim FieldList As List(Of String)
        Dim x As Integer
        Dim Result As String = ""

        FieldList = _Fields.Keys.ToList()
        FieldList.Sort()

        FieldCount = FieldList.Count

        For x = 0 To FieldCount - 1
            'need to substring & PAD & Strip quotes
            Select Case FieldDefs(x).Alignment
                Case "LPAD"
                    Result &= Get_Field_LPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding)
                Case "RPAD"
                    Result &= Get_Field_RPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding)
                Case "ZPAD"
                    Result &= Get_Field_ZPAD(_Fields(FieldList(x)), FieldDefs(x).FLength, FieldDefs(x).Padding)
            End Select

            If x < FieldCount - 1 Then
                Result &= Interchange.ElementDelimiter
            End If
        Next
        Return Result
    End Function

    Public Function Validate() As Boolean Implements Translate.Validate
        Throw New NotImplementedException()
    End Function

    Private Sub LoadFieldDef(TranDefFileName As String)
        If File.Exists(TranDefFileName) Then
            Dim xml_serializer As New XmlSerializer(GetType(FieldDefSet))
            Dim stream_reader As New StreamReader(TranDefFileName)
            Dim myFieldDefs As FieldDefSet = DirectCast(xml_serializer.Deserialize(stream_reader),
                                                 FieldDefSet)
            stream_reader.Close()

            Debug.Print("Here")

        Else

        End If
    End Sub

End Class
